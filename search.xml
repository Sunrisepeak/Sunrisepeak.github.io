<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Divide-and-Conquer &gt;&gt; Maximum Contiguous Subsequence Sum Algorithms</title>
    <url>/2020/02/24/cs/DS-Algorithms/max-subseq-sum/</url>
    <content><![CDATA[<h4 id="Algorithms-1"><a href="#Algorithms-1" class="headerlink" title="Algorithms 1"></a>Algorithms 1</h4><blockquote>
<p>‘Divide-and-Conquer’ by Recursive</p>
</blockquote>
<h5 id="Algorithms-Thinking"><a href="#Algorithms-Thinking" class="headerlink" title="Algorithms Thinking"></a>Algorithms Thinking</h5><blockquote>
<p>​    For one thing, take a set divided into two part with left and right and work out max-sub-sum respectively. To left and right hand by recursive to process. In addition, computation maximum border subseq-sum of mid to left and to hand then add get new maxSubSum. In the end, return a max value in the three ‘maxSubSum’.</p>
</blockquote>
<a id="more"></a>
<h5 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubSum</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[left] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> arr[left];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> leftMaxSSum = maxSubSum(arr, left, mid);</span><br><span class="line">        <span class="keyword">int</span> rightMaxSSum = maxSubSum(arr, mid + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxLeftBorderSum = <span class="number">0</span>, leftBorderSum = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i &gt;= left; i--) &#123;</span><br><span class="line">            leftBorderSum += arr[i];</span><br><span class="line">            <span class="keyword">if</span> (leftBorderSum &gt; maxLeftBorderSum) &#123;</span><br><span class="line">                maxLeftBorderSum = leftBorderSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxRightBorderSum = <span class="number">0</span>, rightBorderSum = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">            rightBorderSum += arr[i];</span><br><span class="line">            <span class="keyword">if</span> (rightBorderSum &gt; maxRightBorderSum) &#123;</span><br><span class="line">                maxRightBorderSum = rightBorderSum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(maxLeftBorderSum + maxRightBorderSum, <span class="built_in">max</span>(leftMaxSSum, rightMaxSSum));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><h6 id="time-complexity-O-nlogn"><a href="#time-complexity-O-nlogn" class="headerlink" title="time complexity: $O(nlogn)$"></a>time complexity: $O(nlogn)$</h6><h4 id="Algorithms-2"><a href="#Algorithms-2" class="headerlink" title="Algorithms 2"></a>Algorithms 2</h4><blockquote>
<p>Online Algorithms</p>
</blockquote>
<h5 id="Algorithms-Thinking-1"><a href="#Algorithms-Thinking-1" class="headerlink" title="Algorithms Thinking"></a>Algorithms Thinking</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[---------------------------]</span><br><span class="line">          |    |    |</span><br><span class="line">          L    p    i       index-pointer</span><br></pre></td></tr></table></figure>
<h5 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxSubMax</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>, maxSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : arr) &#123;</span><br><span class="line">        sum += v;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; maxSum) &#123;</span><br><span class="line">            maxSum = sum;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Proof"><a href="#Proof" class="headerlink" title="Proof"></a>Proof</h5><blockquote>
<p>Why L-pointer skip to i when sum less than zero?</p>
<p>assumption:    exist L &lt; p &lt; i , let [p, i] &gt; 0</p>
<blockquote>
<p>we known [L, p) &gt; 0</p>
<p>again, obvious [L, i] = [L, p) + [p, i]  &gt; 0;</p>
<p>but [L, i] &lt; 0, so [p, i] &gt; 0 is mistake assumption.</p>
<p>so, [p, i] &lt;= 0, can let L = i when [p, i] &lt; 0;</p>
</blockquote>
</blockquote>
<h5 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h5><blockquote>
<p>tiem complexity: O(n)</p>
</blockquote>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ul>
<li><a href="https://book.douban.com/subject/26910665/" target="_blank" rel="noopener">Data Structures and Algorithms Analysis in C++</a></li>
</ul>
<h4 id="QuickLink"><a href="#QuickLink" class="headerlink" title="QuickLink"></a>QuickLink</h4><ul>
<li><a href="https://sunrisepeak.github.io/">SPeakNote Blog</a></li>
<li><a href="https://github.com/Sunrisepeak/RC-Note" target="_blank" rel="noopener">Makedown File Address</a></li>
<li><a href="https://github.com/Sunrisepeak" target="_blank" rel="noopener">Github</a></li>
</ul>
]]></content>
      <categories>
        <category>cs</category>
        <category>DS&amp;Algorithms</category>
      </categories>
      <tags>
        <tag>Divide-and-Conquer</tag>
        <tag>Online-Algorithms</tag>
        <tag>Recursive</tag>
        <tag>Algorithms</tag>
        <tag>分治</tag>
        <tag>在线处理</tag>
        <tag>递归</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Collection &gt;&gt; Basic Operator of List[]</title>
    <url>/2020/02/18/cs/python/list-summary/</url>
    <content><![CDATA[<h4 id="Basic-Characteristics"><a href="#Basic-Characteristics" class="headerlink" title="Basic Characteristics"></a>Basic Characteristics</h4><blockquote>
<p>A list is a collection of items in a particular order.</p>
</blockquote>
<h5 id="Declaration-amp-define-—-store-any-object-type"><a href="#Declaration-amp-define-—-store-any-object-type" class="headerlink" title="Declaration &amp; define — store any object[type]"></a>Declaration &amp; define — store any object[type]</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lt = [<span class="number">1</span>, <span class="number">1.1</span>, <span class="string">'str'</span>, [<span class="string">'list'</span>]] <span class="comment"># contain type : [int, float, string, list]</span></span><br></pre></td></tr></table></figure>
<h4 id="Basic-Operator-CRUD"><a href="#Basic-Operator-CRUD" class="headerlink" title="Basic Operator[CRUD]"></a>Basic Operator[CRUD]</h4><h5 id="Accessing-Elements-by-index"><a href="#Accessing-Elements-by-index" class="headerlink" title="Accessing Elements by index"></a>Accessing Elements by index</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">           [<span class="number">1</span>, <span class="number">1.1</span>, <span class="string">'str'</span>, [<span class="string">'list'</span>]]</span><br><span class="line">postive:    <span class="number">0</span>   <span class="number">1</span>     <span class="number">2</span>        <span class="number">3</span></span><br><span class="line">negative:  <span class="number">-4</span>  <span class="number">-3</span>    <span class="number">-2</span>       <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h6 id="Positive-Index-—-index-of-interval-is-0-length-which-begin-from-0"><a href="#Positive-Index-—-index-of-interval-is-0-length-which-begin-from-0" class="headerlink" title="Positive Index — index of interval is [0, length), which begin from 0."></a>Positive Index — index of interval is [0, length), which begin from 0.</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(lt[<span class="number">0</span>]) <span class="comment">#output: 1</span></span><br></pre></td></tr></table></figure>
<h6 id="Negative-Index-—-index-of-interval-is-lentgh-1"><a href="#Negative-Index-—-index-of-interval-is-lentgh-1" class="headerlink" title="Negative Index — index of interval is [-lentgh, -1]"></a>Negative Index — index of interval is [-lentgh, -1]</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Tiny skill: output last element of list by -1(index), rather than 3(lenght - 1)</span></span><br><span class="line">print(lt[<span class="number">-1</span>]) <span class="comment"># output: ['list']</span></span><br></pre></td></tr></table></figure>
<h5 id="Adding-Elements-—-append-insert"><a href="#Adding-Elements-—-append-insert" class="headerlink" title="Adding Elements — append(), insert()"></a>Adding Elements — append(), insert()</h5><h6 id="append-—-at-the-end-of-a-list"><a href="#append-—-at-the-end-of-a-list" class="headerlink" title="append() — at the end of a list"></a>append() — at the end of a list</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lt.append(<span class="string">'Adding'</span>)</span><br><span class="line">print(lt) <span class="comment"># output: [1, 1.1, 'str', ['list'], 'Adding']</span></span><br></pre></td></tr></table></figure>
<h6 id="insert-index-obj-—-index-is-position-of-adding-you-want-interval-is-0-length-OR-length-1"><a href="#insert-index-obj-—-index-is-position-of-adding-you-want-interval-is-0-length-OR-length-1" class="headerlink" title="insert(index, obj) — index is position of adding you want.  interval is [0, length) OR [-length, -1]"></a>insert(index, obj) — index is position of adding you want.  interval is [0, length) OR [-length, -1]</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lt.insert(<span class="number">0</span>, <span class="string">'insert_0'</span>)</span><br><span class="line">lt.insert(<span class="number">-1</span>, <span class="string">'insert_end(-1)'</span>)</span><br><span class="line">print(lt) <span class="comment"># output:['insert_0', 1, 1.1, 'str', ['list'], 'insert_end(-1)', 'Adding']</span></span><br><span class="line"><span class="comment"># Is consuqence of output different with you ?</span></span><br><span class="line"><span class="comment"># insert(index, obj) method is backwards move a unit for elements of</span></span><br><span class="line"><span class="comment"># index rihgt-hand and itself.To -1(index), position of end before change. So:</span></span><br><span class="line"><span class="comment"># ['insert_0', 1, 1.1, 'str', ['list'], 'Adding']</span></span><br><span class="line"><span class="comment">#                                          -1</span></span><br><span class="line"><span class="comment"># ['insert_0', 1, 1.1, 'str', ['list'], 'insert_end(-1)', 'Adding']</span></span><br><span class="line"><span class="comment">#                                              | </span></span><br><span class="line"><span class="comment">#                                       insert of position</span></span><br></pre></td></tr></table></figure>
<h5 id="Remove-Elements-—-del-pop-remove"><a href="#Remove-Elements-—-del-pop-remove" class="headerlink" title="Remove Elements —  del, pop(), remove()"></a>Remove Elements —  del, pop(), remove()</h5><h6 id="del-statement-—-certain-position-by-index"><a href="#del-statement-—-certain-position-by-index" class="headerlink" title="del statement —- certain position by index"></a>del statement —- certain position by index</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> lt[<span class="number">-1</span>]</span><br><span class="line">print(lt) <span class="comment"># output: ['insert_0', 1, 1.1, 'str', ['list'], 'insert_end(-1)']</span></span><br></pre></td></tr></table></figure>
<h6 id="pop-amp-pop-index-—-remove-with-return-value"><a href="#pop-amp-pop-index-—-remove-with-return-value" class="headerlink" title="pop() &amp; pop(index)   —  remove with return-value"></a>pop() &amp; pop(index)   —  remove with return-value</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># like stack -- DS</span></span><br><span class="line">re_value = lt.pop()</span><br><span class="line">print(re_value)	<span class="comment"># output: insert_end(-1)</span></span><br><span class="line">print(lt) <span class="comment"># ['insert_0', 1, 1.1, 'str', ['list']]</span></span><br></pre></td></tr></table></figure>
<h6 id="remove-value-—-by-value"><a href="#remove-value-—-by-value" class="headerlink" title="remove(value) — by value"></a>remove(value) — by value</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lt.remove(<span class="number">1</span>)</span><br><span class="line">print(lt) <span class="comment"># output: ['insert_0', 1.1, 'str', ['list']]</span></span><br></pre></td></tr></table></figure>
<h5 id="Change-Elements-—-by-index"><a href="#Change-Elements-—-by-index" class="headerlink" title="Change Elements — by index"></a>Change Elements — by index</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lt[<span class="number">-2</span>] = <span class="string">'string'</span> <span class="comment"># change 'str' to 'string'</span></span><br><span class="line">print(lt) <span class="comment"># output: ['insert_0', 1.1, 'string', ['list']]</span></span><br></pre></td></tr></table></figure>
<h4 id="Code-Summary"><a href="#Code-Summary" class="headerlink" title="Code Summary"></a>Code Summary</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lt = [<span class="number">1</span>, <span class="number">1.1</span>, <span class="string">'str'</span>, [<span class="string">'list'</span>]] <span class="comment"># contain type : [int, float, string, list]</span></span><br><span class="line"></span><br><span class="line">print(lt[<span class="number">0</span>]) <span class="comment">#output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tiny skill: output last element of list by -1(index), rather than 3(lenght - 1)</span></span><br><span class="line">print(lt[<span class="number">-1</span>]) <span class="comment"># output: ['list']</span></span><br><span class="line"></span><br><span class="line">lt.append(<span class="string">'Adding'</span>)</span><br><span class="line">print(lt) <span class="comment"># output: [1, 1.1, 'str', ['list'], 'Adding']</span></span><br><span class="line"></span><br><span class="line">lt.insert(<span class="number">0</span>, <span class="string">'insert_0'</span>)</span><br><span class="line">lt.insert(<span class="number">-1</span>, <span class="string">'insert_end(-1)'</span>)</span><br><span class="line">print(lt) <span class="comment"># output:['insert_0', 1, 1.1, 'str', ['list'], 'insert_end(-1)', 'Adding']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> lt[<span class="number">-1</span>]</span><br><span class="line">print(lt) <span class="comment"># output: ['insert_0', 1, 1.1, 'str', ['list'], 'insert_end(-1)']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># like stack -- DS</span></span><br><span class="line">re_value = lt.pop()</span><br><span class="line">print(re_value)</span><br><span class="line">print(lt)</span><br><span class="line"></span><br><span class="line">lt.remove(<span class="number">1</span>)</span><br><span class="line">print(lt)</span><br><span class="line"></span><br><span class="line">lt[<span class="number">-2</span>] = <span class="string">'string'</span> <span class="comment"># change 'str' to 'string'</span></span><br><span class="line">print(lt)</span><br></pre></td></tr></table></figure>
<h4 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h4><ul>
<li>Ubuntu18.x</li>
<li>python 3.6.9</li>
</ul>
<h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><ul>
<li><a href="https://book.douban.com/subject/26284937/" target="_blank" rel="noopener">Python Crash Course</a></li>
</ul>
<h4 id="QuickLink"><a href="#QuickLink" class="headerlink" title="QuickLink"></a>QuickLink</h4><ul>
<li><a href="https://sunrisepeak.github.io/">SPeakNote Blog</a></li>
<li><a href="https://github.com/Sunrisepeak/RC-Note" target="_blank" rel="noopener">Makedown File Address</a></li>
<li><a href="https://github.com/Sunrisepeak" target="_blank" rel="noopener">Github</a></li>
</ul>
]]></content>
      <categories>
        <category>cs</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Collection</tag>
        <tag>List</tag>
        <tag>CRUD</tag>
      </tags>
  </entry>
  <entry>
    <title>CppPrimer5th Exrecise Section 4.8</title>
    <url>/2020/02/17/books-exercises/cpp/cpp-primer-5th/cpp-primer-5th-Ex4.8/</url>
    <content><![CDATA[<h3 id="Ex-4-25"><a href="#Ex-4-25" class="headerlink" title="Ex: 4.25"></a>Ex: 4.25</h3><p>在<code>int</code>为32bit，<code>q</code> 的位模式为 <code>01110001</code> 的情况下<code>~&#39;q&#39; &lt;&lt; 6</code>的结果是？</p>
<h4 id="Program-Test-g-for-linux"><a href="#Program-Test-g-for-linux" class="headerlink" title="Program Test(g++ for linux)"></a>Program Test(g++ for linux)</h4><h5 id="C-Code"><a href="#C-Code" class="headerlink" title="C++ Code"></a>C++ Code</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> c = <span class="string">'q'</span>;  <span class="comment">// 01110001</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = ~c &lt;&lt; <span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Output"><a href="#Output" class="headerlink" title="Output:"></a>Output:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-7296</span><br></pre></td></tr></table></figure>
<h4 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h4><h5 id="Code-Perform-Step"><a href="#Code-Perform-Step" class="headerlink" title="Code Perform Step"></a>Code Perform Step</h5><ul>
<li><p>left-associative:  <code>~&#39;q&#39; &lt;&lt; 6</code> equivalence with <code>(~&#39;q&#39;) &lt;&lt; 6</code></p>
</li>
<li><p>promoted to int for <code>~&#39;q&#39;</code>:  <code>~(01110001b)</code> to <code>~(00000000 00000000 00000000 01110001 b)</code></p>
</li>
<li><p>Bitwise Not operator(<code>~</code>): <code>(11111111 11111111 11111111 1000110b) &lt;&lt; 6</code></p>
<a id="more"></a></li>
<li><p>left-shift operator(<code>&lt;&lt;</code>) : <code>11 11111111 11111111 1000110 000000b</code></p>
</li>
<li><p>computation binary number:</p>
<p>   11111111 11111111 1110001 10000000b<br>   True form: 10000000 00000000 0001110 10000000 b</p>
<p>​    -(2^11 + 2^10 + 2^9 + 2^7)  =  - (2048 + 1024 + 512 + 128) = -3712 what? Oh, No</p>
</li>
</ul>
<h5 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">oh, lose an zero in Bitwise Not operator step. so computation:</span><br><span class="line">modify:</span><br><span class="line">   (11111111 11111111 11111111 100011 1 0b) &lt;&lt; 6</span><br><span class="line">    11111111 11111111 11100011 10000000 b</span><br><span class="line">new [true form] : 10000000 00000000 00011100 10000000 b</span><br><span class="line">  - (2^12 + 2^11 + 2^10  + 2^7) &#x3D; - (4096 + 2048 + 1024 + 128) &#x3D; -7296 Oh, Yell</span><br></pre></td></tr></table></figure>
<p>​    </p>
<h3 id="Ex-4-26"><a href="#Ex-4-26" class="headerlink" title="Ex:4.26"></a>Ex:4.26</h3><ul>
<li>Because of Bits of int type could different in machine.As usual, it’s is that great than and quals 16bit.</li>
</ul>
<h3 id="Ex-4-27"><a href="#Ex-4-27" class="headerlink" title="Ex:4.27"></a>Ex:4.27</h3><p>What is the result of each of these of expressions?</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> ull = <span class="number">3</span>, ul2 = <span class="number">7</span>;</span><br><span class="line">    (a) ull &amp; ul2 </span><br><span class="line">    (b) ull | ul2 </span><br><span class="line">    (c) ull &amp;&amp; ul2 </span><br><span class="line">    (d) ull || ul2</span><br></pre></td></tr></table></figure>
<h4 id="Program-Test-g-for-linux-1"><a href="#Program-Test-g-for-linux-1" class="headerlink" title="Program Test(g++ for linux)"></a>Program Test(g++ for linux)</h4><h5 id="C-Code-1"><a href="#C-Code-1" class="headerlink" title="C++ Code"></a>C++ Code</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> ul1 = <span class="number">3</span>, ul2 = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (ul1 &amp; ul2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (ul1 | ul2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (ul1 &amp;&amp; ul2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (ul1 || ul2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">7</span><br><span class="line">1</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h4 id="Analysis-1"><a href="#Analysis-1" class="headerlink" title="Analysis"></a>Analysis</h4><h5 id="Binary-Number-View-bit-op-amp-logic-op"><a href="#Binary-Number-View-bit-op-amp-logic-op" class="headerlink" title="Binary Number View(bit op &amp; logic op)"></a>Binary Number View(bit op &amp; logic op)</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ul1 &#x3D; 3  -&gt;  000...00011</span><br><span class="line">ul2 &#x3D; 7  -&gt;  000...00111</span><br></pre></td></tr></table></figure>
<h6 id="Bit-Op-amp"><a href="#Bit-Op-amp" class="headerlink" title="Bit-Op (&amp;, |)"></a>Bit-Op (&amp;, |)</h6><p>&amp; op</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   000...00011</span><br><span class="line">&amp;  000...00111</span><br><span class="line">------------------------</span><br><span class="line">   000...00011  --&gt; 3</span><br></pre></td></tr></table></figure>
<p>| op</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   000...00011</span><br><span class="line">|  000...00111</span><br><span class="line">------------------------</span><br><span class="line">   000...00111  --&gt; 7</span><br></pre></td></tr></table></figure>
<h6 id="Logic-Op-amp-amp"><a href="#Logic-Op-amp-amp" class="headerlink" title="Logic-Op (&amp;&amp;, ||)"></a>Logic-Op (&amp;&amp;, ||)</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 &amp;&amp; 3 --&gt;  true &amp;&amp; true --&gt; true(1)</span><br></pre></td></tr></table></figure>
<p>|| op</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 || 3 --&gt;  true &amp;&amp; true --&gt; true(1)</span><br></pre></td></tr></table></figure>
<h3 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h3><ul>
<li><p>Ubuntu 18.x</p>
</li>
<li><p>g++ </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0</span><br><span class="line">Copyright (C) 2017 Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source for copying conditions.  There is NO</span><br><span class="line">warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li>cpp primer 5th</li>
<li>Youdao Dictionary (ha ha)[This is the worst he had ever been back a pot]</li>
</ul>
]]></content>
      <categories>
        <category>cs</category>
        <category>c++</category>
        <category>cpp-primer</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>Bit-OP</tag>
        <tag>位操作</tag>
        <tag>Logic-OP</tag>
      </tags>
  </entry>
  <entry>
    <title>Test Typora</title>
    <url>/2020/02/16/Test/TestTypora/</url>
    <content><![CDATA[<h3 id="this-is-Typora-test"><a href="#this-is-Typora-test" class="headerlink" title="this is Typora test"></a>this is Typora test</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"test code"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>T………………</p>
]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
        <tag>Debug</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>TestValineCommnet</title>
    <url>/2020/02/16/Test/TestValineCommnet/</url>
    <content><![CDATA[<p>Commint………</p>
]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>TestMathJax</title>
    <url>/2020/02/16/Test/TestMathJax/</url>
    <content><![CDATA[<p>….</p>
<a id="more"></a>
<script type="math/tex; mode=display">\begin{equation} \label{eq1}
e=mc^2
\end{equation}</script>]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>Math</tag>
        <tag>Test</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
</search>
